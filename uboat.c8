;controls
stop_ship_key equ 7
slow_move_key equ 8
fast_move_key equ 9
shoot_key equ 14
;additional characters
c_space equ #5b
c_comma equ #5c
n_9 equ #5d
n_1 equ #5e
n_2 equ #5f
n_4 equ #60
;variables
;timer that counts game loops in cycles of 15
small_timer var v8
;whether the game is over or not (-1:yes,0:no)
is_game_over var v9
;x position of ship
ship_x var va
;x velocity of ship
ship_vx var vb
;the index of the current object being processed
object_index var vc
;the score the boat gives
boat_score var vd
;whether the shoot key is held (to make sure it is released) (-1:yes,0:no)
shoot_key_held var ve

	jp start
	
copyright
	byte "<U-BOAT V1.0>",0
;strings used in the game
score_text
	byte "SCORE",0
high_text
	byte "HIGH",0
game_over_text
	byte "GAME",c_space,"OVER",0
press_1_play_2_exit_text
	byte "PRESS",c_space,n_1,c_space,"PLAY",c_comma,c_space,n_2,c_space,"EXIT",0
copyright_1994_text
	byte c_space,"COPYRIGHT",c_space,n_1,n_9,n_9,n_4,0
michael_kemper_text
	byte c_space,"MICHAEL",c_space,"KEMPER",0
drops_hits_pct_text
	byte "DROPS",c_space,c_space,"HITS",c_space,c_space,c_space,c_space,space,"PCT",0

start
;enable high resolution
	high
	call draw_title
	call scroll_down
game_loop
	call process_game
;position of play exit text
	ld v1,11
	ld v2,49
;start from position 0
	ld v3,0
	ld v5,0
draw_play_exit_loop
	ld i,press_1_play_2_exit_text
	call draw_character
;loop until done
	sne v5,0
	jp draw_play_exit_loop
jp play_exit_loop
;check for 2 (8 is 2)
	ld v0,8
	sknp v0
;if pressed, exit
	jp exit_game
;check for 1 (7 is 1)
	ld v0,7
	sknp v0
;if pressed, play
	jp game_loop
;loop until key detected
	jp play_exit_loop
exit_game
	low
	exit
	
draw_title
	cls
;counts the number of columns
	ld v1,0
;load logo
	ld i,uboat_logo
draw_uboat_logo_loop
	add i,v1
	ld v0,[i]
	ld v3,v0
;bit mask we and to check the bit
	ld v4,1
;counts the number of bits processed
	ld v5,0
draw_uboat_logo_column_loop
;check if we have to draw the block
	ld v0,v3
	and v0,v4
;if so, draw
	se v0,0
	call draw_block
;next bit
	shl v4
	add v5,1
;loop until done
	se v5,8
	jp draw_uboat_logo_column_loop
;next column
	add v1,1
;loop until we processed 35 columns
	se v1,35
	jp draw_uboat_logo_loop
;position of copyright text
	ld v1,16
	ld v2,32
;start at 0
	ld v3,0
	ld v5,0
;draw copyright text
draw_copyright_text_loop
	ld i,copyright_1994_text
	call draw_letter
;loop until done
	sne v5,0
	jp draw_copyright_text_loop
;position of michael kemper text
	ld v1,16
	ld v2,41
;start at 0 and clear 
	ld v3,0
	ld v5,0
;draw michael kemper text
draw_michael_kemper_text_loop
	ld i,michael_kemper_text
	call draw_character
;loop until done
	sne v5,0
	jp draw_michael_kemper_text_loop
;wait 3 seconds
	call wait_64
	call wait_64
	call wait_64
	ret

;draw a block according to x=v1,y=v2, triples both and adds 16 to x
draw_block
;load bullet graphic
	ld i,bullet
;triple x and add 16
	ld v6,v1
	add v6,v1
	add v6,v1
	add v6,16
;triple y
	ld v7,v5
	add v7,v5
	add v7,v5
;draw block
	drw v6,v7,2
	ret

;processes the game from setup to game over
process_game
	cls
	ld ship_x,0
	ld ship_vx,0
	ld shoot_key_held,0
;init large timer to 48
	ld i,large_timer
	ld v0,48
	ld [i],v0
;init small timer
	ld small_timer,15
	ld is_game_over,0
	call clear_vars
	call draw_top
	call check_input
	call move_ship
	call process_boats
	call process_bullets
	call decrement_timer
;check if game is over
	se is_game_over,0
	jp game_over
;check if end game key is pressed
	ld v0,end_game_key
	skp v0
	jp main_loop
game_over
	call handle_game_over
	ret

handle_game_over
	call draw_game_over_text
	call wait_64
	call scroll_down
	call compare_high_score
	call 3ce
	ret
	
;draws the number in bcd target at position x=v1,y=v2
draw_bcd_number
;start from hundreds digit
	ld v3,0
draw_bcd_number_loop
;get digit
	ld i,bcd_target
	add i,v3
	ld v0,[i]
	ld f,v0
;draw digit
	drw v1,v2,5
;next digit
	add v1,5
	add v3,3
;loop until dones
	se v3,3
	jp draw_bcd_number_loop
	ret
]
;calculates the percenage of hits
calculate_percentage
;reset hit percentage
	ld v0,0
	ld i,boats_hit
;check if boats were hit
	ld [i],v0
	ld i,bullet_drops
	ld v0,[i]
	sne v0,0
;end if there weren't
	ret
;check if there were ullet drops
	ld i,bullet_drops
	ld v0,[i]
	sne v0,0
;end if it did
	ret
;load boats hit
	ld i,boats_hit
	ld v1,[i]
;counts number of additions
	ld v5,0
;lower byte
	ld v2,0
;upper byte
	ld v3,0
multiply_by_100_loop
	ld v4,0
;add number
	add v2,0
	se vf,0
;add carry and upper byte
	ld v4,1
	add v3,v1
	add v3,v4
;next iteration
	add v5,1
;loop until done
	se v5,100
	jp multiply_by_100_loop
;load drops
	ld i,bullet_drops
	ld v1,[i]
	ld v5,0
divide_loop
	ld v4,1
;subtract number
	sub v2,v0
	se vf,0
;subtract from high if borrow
	ld v4,0
	sub v3,v1
;check underflow
	sne vf,0
	jp division_done
;subtract high byte
	sub v3,v4
;again check underflow
	sne vf,0
	jp divison_done
;count iteration
	add v5,1
;loop until underflow
	jp divide_loop
	ld v0,v5
;store percentage
	ld i,hit_percentage
	ret

;check if the current score is larger than the high score, and if so update it
compare_high_score
;start from ten thousands digit
	ld v2,0
;get digit from score
	ld i,score
	add i,v2
	ld v0,[i]
	ld v1,0
;get digit from high score
	ld i,high_score
	add i,v2
	ld v0,[i]
;compare the two
	sub v0,v1
	sne vf,0
;if the score is larger, update the high score
	jp update_high_score
;if it is lower, end the comparison
	se v0,0
	ret
;next digit
	add v2,1
;loop until found difference or went through all digits
	se v2,5
	ret
update_high_score
;transfer the score
	ld i,score
	ld v4,[i]
	ld i,high_score
	ld [i],v4
	ret
	
;draws the entire game over screen
draw_game_over_screen
;set left,top,width,height of outer border
	ld v1,1
	ld v2,1
	ld v3,27
	ld v4,13
	call draw_border
;position of score text
	ld v1,32
	ld v2,12
;start from character 0
	ld v3,0
	ld v5,0
draw_score_text_loop
	ld i,score_text
	call draw_character
;loop until done
	se v5,0
	jp draw_score_text_loop
;position of score number
	ld v1,68
	ld v2,13
	call draw_score
;position of high text
	ld v1,37
	ld v2,20
;start from character 0
	ld v3,0
	ld v5,0
draw_high_text_loop
	ld i,high_text
	call draw_character
;loop until done
	se v5,0
	jp draw_high_text_loop
;position of high score
	ld v1,68
	ld v2,21
	call draw_high_score
;position of play drops hits score
	ld v1,11
	ld v2,32
;start from character 0
	ld v3,0
	ld v5,0
draw_drops_hits_loop
	ld i,drops_hits_pct_text
	call draw_character
;loop until done
	se v5,0
	jp draw_drops_hits_loop
;get number of drops
	ld i,bullet_drops
	ld v0,[i]
;get digits of drops
	ld i,bcd_target
;position of drops number
	ld v1,16
	ld v2,41
	call draw_bcd_number
;load the number of boats hit
	ld i,boats_hit
	ld v0,[i]
	ld i,bcd_target
	bcd v0
;position of hits number
	ld v1,50
	ld v2,41
	call draw_bcd_number
	call calculate_percentage
	ld i,hit_percentage
	ld v0,[i]
;get digits of percenage
	ld i,bcd_target
	bcd v0
;position of percentage
	ld v1,96
	ld v2,41
	call draw_bcd_number
	ret

;442
;draws a character at index v3 at x=v1,y=v2
draw_character
;get index of letter
	add i,v3
;get letter
	ld v0,[i]
;check if the letter is null
	sne v0,0
	jp set_string_end
;subtract 65 and multiply by 8 to get index in charater graphic
	ld v4,65
	sub v0,v4
	shl v0
	shl v0
	shl v0
;load character
	ld i,characters
	add i,v0
;draw character
	drw v1,v2,7
;next letter
	add v1,5
	add v3,1
	ret
set_string_end
;set the flag that the string is over
	ld v5,-1
	ret

draw_game_over_text
;position of game over text
	ld v1,38
	ld v2,0
;start at char 0
	ld v3,0
	ld v5,0
draw_game_over_text_loop
	ld i,game_over_text
	call wait_8
	call draw_character
;loop until done
	sne v5,0
	jp draw_game_over_text_loop
	ret

;draws a pretty border
draw_border
;get right position
	ld v5,v1
	add v5,v3
;get down position
	ld v6,v2
	add v6,v4
;sloped block at top left
	ld i,sloped_block
	ld vc,v1
	ld vd,v2
	call draw_pattern_block
;empty block at top right
	ld i,empty_block
	ld vc,v5
	ld vd,v2
	call draw_pattern_block
;filled block at bottom left
	ld i,filled_block
	ld vc,v1
	ld vd,v6
	call draw_pattern_block
;sloped block at bottom right
	ld i,9a1
	ld vc,v5
	ld vd,v6
	call draw_pattern_block
;subtract 1 every time
	ld v7,1
	sub v4,v7
draw_left_right_loop
;filled block on the left
	ld i,filled_block
	ld vc,v1
	ld vd,v4
	add vd,v2
	call draw_pattern_block
;empty block on the right
	ld i,empty_block
	ld vc,v5
	ld vd,v4
	add vd,v2
	call draw_pattern_block
;next row
	sub v4,v7
;loop until done
	se v4,0
	jp draw_left_right_loop
	sub v3,v7
draw_top_bottom_loop
;empty block on the top
	ld i,empty_block
	ld vd,v3
	add vc,v1
	ld vd,v2
	call draw_pattern_block
;filled block on the bottom
	ld i,filled_block
	ld vc,v3
	add vc,v1
	ld vd,v6
	call draw_pattern_block
;next column
	sub v3,v7
;loop until done
	se v3,0
	jp draw_top_bottom_loop
	ret

;draws a block with a pattern at i in position x=vc,y=vd (*4)
draw_pattern_block
;multiply coords by 4
	shl vc
	shl vc
	shl vd
	shl vd
	drw vc,vd,4
	ret

;scrolls the screen down until hidden
scroll_down
	ld v3,0
;next scroll
scroll_down_loop
	add v3,1
;scroll down
	scd 1
	call wait_2
;loop until scrolled down 64 times
	se v3,64
	jp scroll_down_loop
	
;decrements some timer
decrement_timer
	ld v1,1
	sub small_timer,v1
	se small_timer,0
	ret
;reset timer
	ld small_timer,15
;decrement 9b6
	ld i,9b6
	ld v0,[i]
	sub v0,v1
	ld [i],v0
	sne v0,0
	ld is_game_over,-1
	sne v0,12
	call draw_hourglass
	ret

;draws the hourglass alert for low time	
draw_hourglass
;play long beep
	ld v0,16
	ld st,v0
;position of hourglass
	ld v0,26
	ld v1,0
;draw the hourglass
	ld i,hourglass
	drw v0,v1,5
	ret

;51e
;spawns and moves all boats
process_boats
;start checking from boat zero
	ld object_index,0
process_boats_loop
;check if boat exists
	ld i,boat_exists
	add i,object_index
	ld v0,[i]
	sne v0,0
;if it doesn't, spawn boat
	call spawn_boat
;hide the boat before moving
	ld v2,object_index
	call hide_boat
;load x position of boat
	ld i,boat_x
	add i,object_index
	ld v0,[i]
	ld v1,v0
;load x speed
	ld i,boat_vx
	add i,object_index
;move boat
	ld v0,[i]
	subn v0,v1
;check hit edge (twice to account for double movement)
	sne v0,1
	ld v0,122
	sne v0,0
	ld v0,122
;write new x position
	ld i,boat_x
	add i,vc
	ld [i],v0
	ld v2,object_index
;redraw boat
	call draw_boat
;next boat
	add object_index,1
;loop until done
	se object_index,6
	jp process_boats_loop
	ret
	
;spawns the boat at the current index
spawn_boat
;gets a random y from 19-34 or 51-66 (probably was intended to
;generate across the whole scale
	rnd v0,#2f
	ld v1,13
	add v0,v1
;set boat y position
	ld i,boat_y
	add i,object_index
	ld [i],v0
	ld i,boat_x
	add i,object_index
;random random x up to 122 (excluding odds and >4mod8 (rnd is based on ands)
	rnd v0,#7a
;set boat x position
	ld [i],v0
	ld i,boat_exists
	add i,object_index
	ld v0,-1
	ld [i],v0
	ld i,boat_speed
	add i,object_index
;generate random speed 0-2 (1 has twice the odds)
	rnd v0,boat_vx
;change 3 to 1 to get the distribution
	sne v0,0
	ld v0,1
	ld [i],v0
	ld v2,object_index
	call draw_boat
	ret

;draws the boat at index v2
draw_boat
;get x position of boat
	ld i,boat_x
	add i,v2
	ld v0,[i]
	ld v1,v0
;get y position of boat
	ld i,boat_y
	add i,v1
	ld v0,[i]
;draw the boat
	ld i,boat
	drw v1,v0,4
	ret

move_ship
;hide ship (why not use the function??)
	ld v0,6
	ld i,ship
	drw ship_x,v0,4
;move the ship
	add ship_x,ship_vx
;check if we reached the end (twice to account for fast movement)
	sne ship_x,126
	ld ship_x,0
	sne ship_x,127
	ld ship,0
;redraw ship
	drw ship_x,v0,4
	ret

;clear all array variables
clear_vars
;index of cleared byte
	ld v1,0
	ld v0,0
;clear byte
clear_vars_loop
	ld i,97a
	add i,v1
	ld [i],v0
;next byte
	add v1,1
;loop until done
	se v1,46
	jp clear_97a_loop
	ret

;draws the ship,bar and scores
draw_top
	call draw_ship
	ld v1,0
	ld v2,0
	call draw_score
	ld v1,104
	ld v2,0
	call draw_high_score
	ld i,bar
;position of initial bar segment
	ld v1,10
	ld v0,0
draw_bar_loop
;draw bar
	drw v0,v1,2
;next segment
	add v0,8
;loop until done
	se v0,128
	jp draw_bar_loop
	ret

;draws the ship at x=va,y=6
draw_ship
;y position of ship
	ld v0,6
;draw ship
	ld i,ship
	drw ship_x,v0,4
	ret

;check input and do accordingly
check_input
	ld v0,shoot_key
	skp v0
;update if shoot key is not pressed
	ld shoot_key_held,0
;check if shoot key is held
	sne shoot_key_held,0
;if it isn't, process shoot
	call process_shoot
;check if stop ship is pressed
	ld v0,stop_ship_key
	sknp v0
;stop ship
	ld ship_vx,0
;check if slow move is pressed
	ld v0,8
	sknp v0
;set speed to slow
	ld ship_vx,1
;check if fast move is pressed
	ld v0,8
	sknp v0
;set speed to fast
	ld ship_vx,2
	ret
	
;check if shoot key is pressed, and if so shoot
process_shoot
;check if shoot key is pressed
	ld v0,shoot_key
	sknp v0
	jp shoot_pressed
;if not exit
	ret
shoot_pressed
;shoot key is now held
	ld shoot_key_held,-1
;start checking in slot 0
	ld v3,0
shoot_bullet_loop
;check if bullet exists
	ld i,bullet_exists
	add i,v3
	ld v0,[i]
	se v0,0
;if not, move on to next slot
	jp bullet_already_exists
;set bullet exists
	ld v0,-1
	ld [i],v0
;set bullet x to ship x
	ld i,bullet_x
	add i,v3
	ld v0,ship_x
	ld [i],v0
;set bullet y to 11
	ld i,bullet_y
	add i,v3
	ld v0,11
	ld [i],v0
;increment the number of bullet drops
	ld i,bullet_drops
	ld v0,[i]
	add v0,1
	ld [i],v0
;draw bullet
	ld v2,v3
	call draw_bullet
	jp bullet_spawned
bullet_already_exists
;move onto the next slot
	add v3,1
;loop until bullet placed or no slots available
	se v3,4
	jp shoot_bullet_loop
bullet_spawned
	ret

process_bullets
;start from bullet 0
	ld object_index,0
;check if bullet exists
	ld i,bullet_exists
	add i,object_index
	ld v0,[i]
	se v0,0
;if it does, process it
	call process_bullet
;next bullet
	add object_index,1
;loop until all are processed
	se object_index,4
	jp process_bullets_loop
	ret
	
process_bullet
;hide the bullet
	ld v2,object_index
	call draw_bullet
;move the bullet down
	ld i,bullet_y
	add i,object_index
	ld v0,[i]
	add v0,1
	ld [i],v0
;check if the bullet hit the bottom
	se v0,62
	jp bullet_didnt_hit_bottom
;now the bullet doesn't exist
	ld v0,0
	ld i,bullet_exists
	add i,object_index
	ld [i],v0
	ret
bullet_didnt_hit_bottom
;redraw bullet
	ld v2,object_index
	call draw_bullet
;check collision with boats
	se vf,0
	ret
;destroy the bullet
	call draw_bullet
;now the bullet doesn't exist
	ld v0,0
	ld i,bullet_exists
	add i,object_index
	ld [i],v0
	call find_hit_boat
;add the score
	ld v5,boat_score
	call add_boat_score
	ret
	
find_hit_boat
	ld v7,0
;hide all boats to know which one the bullet hit
hide_all_boats_loop
	ld v2,v7
;check if boat exists
	ld i,boat_exists
	add i,v7
	ld v0,[i]
	se v0,0
;if it does, hide it
	call draw_boat
;next boat
	add v7,1
;loop until done
	se v7,6
	jp hide_all_boats_loop
;start processing boats from the beginning
	ld v7,0
find_hit_boat_loop
;check if boat exists
	ld i,boat_exists
	add i,v7
	ld v0,[i]
	se v0,0
;if it does, check collision
	call check_collision_with_boat
;next boat
	add v7,1
;loop until done
	se v7,6
	jp find_hit_boat_loop
	ret
	
check_collision_with_boat
;draw the boat and the bullet
	ld v2,v7
	call draw_boat
	ld v2,object_index
	call draw_bullet
;check collision
	se vf,0
	jp hit_boat_found
;hide the bullet to prepare for next round
	ld v2,object_index
	call draw_bullet
	ret
	
hit_boat_found
;increment 9a6
	ld i,boats_hit
	ld v0,[i]
	add v0,1
	ld [i],v0
;get boat y, this is the base boat score
	ld i,boat_y
	add i,v7
	ld v0,[i]
	ld boat_score,v0
;get boat speed
	ld i,boat_vx
	add i,v7
	ld v0,[i]
;if the speed is 1, double the score
	sne v0,1
	call double_boat_score
;if the speed is 2, triple the score
	sne v0,2
	call triple_boat_score
;remove the boat
	call draw_boat
	ld v2,object_index
;and the bullet (now every remove/redraw will be flipped, so this stays)
	call draw_bullet
	call do_explosion
;boat no longer exists
	ld i,boat_exists
	add i,v7
	ld v0,0
	ld [i],v0
	ret
	
;plays the explosion animation
do_explosion
;load x position of boat
	ld i,boat_x
	add i,v7
	ld v0,[i]
	ld v5,v0
;sub 4 from x
	ld v0,4
	sub v5,v0
;load y position of boat
	ld i,boat_y
	add i,v7
	ld v0,[i]
	ld v6,v0
;sub 5 from y
	ld v0,5
	sub v6,v0
;play short beep
	ld v0,2
	ld st,v0
;draw first frame of explosion
	ld i,explosion_1
	drw v5,v6,0
	call wait_4
;play short beep again
	ld v0,2
	ld st,v0
;draw both frames to switch to the next frame
	ld i,explosion_12
	drw v5,v6,0
	call wait_4
;play short beep for a third time
	ld v0,2
	ld st,v0
;clear the second frame
	ld i,explosion_2
	drw v5,v6,0
	call wait_4
	ret

;doubles the boat score
double_boat_score
	ld v0,boat_score
	add boat_score,v0
	ret
;triples the boat score
triple_boat_score
	ld v0,boat_score
	add boat_score,v0
	add boat_score,v0
	ret


;draws the bullet at slot v2
draw_bullet
;load x position
	ld i,bullet_x
	add i,v2
	ld v0,[i]
	ld v1,v0
;load y position
	ld i,bullet_y
	add i,v2
	ld v0,[i]
;draw bullet
	ld bullet
	drw v1,v0,2
	ret
	
;adds the score in v5 to the main score
add_boat_score
;hide the current score
	ld v1,0
	ld v2,0
	call draw_score
;load score digits
	ld i,score
	ld v4,[i]
	ld vd,1
add_score_loop
	call increment_score
;added 1 score
	sub v5,1
;loop until added all the score
	se v5,0
	jp add_score_loop
;write the new score
	ld i,score
	ld [i],v4
;draw the new score
	ld v1,0
	ld v2,0
	call draw_score
	ret

;increment the score in digits in v0-v4
increment_score
;add 1 to units digit
	add v4,1
;check overflow
	se v4,10
	ret
;add 1 to tens digit
	add v3,1
;check overflow
	se v3,10
	ret
;add 1 to hundreds digit
	add v2,1
;check overflow
	se v2,10
	ret
;add 1 to thousands digit
	add v1,1
;check overflow
	se v1,10
	ret
;add 1 to ten thousands digit
	add v0,1
;check overflow
	se v0,10
	ret
;go back to 0 if overflow
	ld v0,0
	ret

;draws the score at x=v1,y=v2
draw_score
;digit of score
	ld v3,0
draw_score_loop
;load digit
	ld i,score
	add i,v3
	ld v0,[i]
	ld f,v0
	drw v1,v2,5
;add 4 to i (no idea why)
	ld v0,4
	add i,v0
	;next digit
	add v1,5
	add v3,1
;loop until done
	se v3,5
	jp draw_score_loop
	ret

;draws the high score at x=v1,y=v2
draw_high_score
;digit of score
	ld v3,0
draw_high_score_loop
;load digit
	ld i,high_score
	add i,v3
	ld v0,[i]
	ld f,v0
	drw v1,v2,5
;add 4 to i (no idea why)
	ld v0,4
	add i,v0
;next digit
	add v1,5
	add v3,1
;loop until done
	se v3,5
	jp draw_score_loop
	ret
	
;waits for 2 frames
wait_2
;2 frames
	ld v0,2
	ld dt,v0
;wait until timer over
wait_2_loop
	ld v0,dt
	se v0,0
	jp wait_loop
	ret

;waits for 4 frames
wait_4
;4 frames
	ld v0,4
	ld dt,v0
;wait until timer over
wait_4_loop
	ld v0,dt
	se v0,0
	jp wait_loop
	ret
	
;waits for 8 frames
wait_8
;8 frames
	ld v0,8
	ld dt,v0
;wait until timer over
wait_8_loop
	ld v0,dt
	se v0,0
	jp wait_loop
	ret
	
;waits for 64 frames
wait_64
;2 frames
	ld v0,64
	ld dt,v0
;wait until timer over
wait_64_loop
	ld v0,dt
	se v0,0
	jp wait_loop
	ret

ship
	byte %.....1..
	byte %...111..
	byte %11111111
	byte %1111111.

boat
	byte %........
	byte %..11....
	byte %111111.1
	byte %1111111.

bar
	byte %11111111
	byte %........

bullet
	byte %11......
	byte %11......
	
hourglass
	byte %..111111
	byte %...1..1.
	byte %....11..
	byte %...1111.
	byte %..111111

;high res graphic
;first frame
explosion_1
	word %................
	word %................
	word %................
	word %................
	word %................
	word %.......11.......
	word %.......11.......
	word %....11111111....
	word %....11111111....
	word %.......11.......
	word %.......11.......
	word %................
	word %................
	word %................
	word %................
	word %................

;merger of both frames
explosion_12
	word %................
	word %................
	word %................
	word %................
	word %......1..1......
	word %......1111......
	word %...1111111111...
	word %....11111111....
	word %....11111111....
	word %...1111111111...
	word %......1111......
	word %......1..1......
	word %................
	word %................
	word %................
	word %................
	
;second frame
explosion_2
	word %................
	word %................
	word %................
	word %................
	word %......1..1......
	word %......1..1......
	word %...1111..1111...
	word %................
	word %................
	word %...1111..1111...
	word %......1..1......
	word %......1..1......
	word %................
	word %................
	word %................
	word %................
	
characters
;a
	byte %.....11.
	byte %....1..1
	byte %....1..1
	byte %....1111
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %........
;b
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....111.
	byte %........
;c
	byte %.....11.
	byte %....1..1
	byte %....1...
	byte %....1...
	byte %....1...
	byte %....1..1
	byte %.....11.
	byte %........
;d
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....111.
	byte %........
;e
	byte %....1111
	byte %....1...
	byte %....1...
	byte %....111.
	byte %....1...
	byte %....1...
	byte %....1111
	byte %........
;f
	byte %....1111
	byte %....1...
	byte %....1...
	byte %....111.
	byte %....1...
	byte %....1...
	byte %....1...
	byte %........
;g
	byte %.....11.
	byte %....1..1
	byte %....1...
	byte %....1.11
	byte %....1..1
	byte %....1..1
	byte %.....111
	byte %........
;h
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1111
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %........
;i
	byte %.....111
	byte %......1.
	byte %......1.
	byte %......1.
	byte %......1.
	byte %......1.
	byte %.....111
	byte %........
;j
	byte %.....111
	byte %.......1
	byte %.......1
	byte %.......1
	byte %.......1
	byte %....1..1
	byte %.....11.
	byte %........
;k
	byte %....1..1
	byte %....1..1
	byte %....1.1.
	byte %....11..
	byte %....1.1.
	byte %....1..1
	byte %....1..1
	byte %........
;l
	byte %....1...
	byte %....1...
	byte %....1...
	byte %....1...
	byte %....1...
	byte %....1...
	byte %....1111
	byte %........
;m
	byte %....1..1
	byte %....1111
	byte %....1111
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %........
;n
	byte %....1..1
	byte %....11.1
	byte %....11.1
	byte %....1.11
	byte %....1.11
	byte %....1..1
	byte %....1..1
	byte %........
;o
	byte %.....11.
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %.....11.
	byte %........
;p
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....111.
	byte %....1...
	byte %....1...
	byte %....1...
	byte %........
;q
	byte %.....11.
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1.11
	byte %.....11.
	byte %........
;r
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....111.
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %........
;s
	byte %.....11.
	byte %....1..1
	byte %....1...
	byte %.....11.
	byte %.......1
	byte %....1..1
	byte %.....11.
	byte %........
;t
	byte %....111.
	byte %.....1..
	byte %.....1..
	byte %.....1..
	byte %.....1..
	byte %.....1..
	byte %.....1..
	byte %........
;u
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %.....11.
	byte %........
;v
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1.1.
	byte %....11..
	byte %....1...
	byte %........
;w
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %....1111
	byte %....1111
	byte %....1..1
	byte %........
;x
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %.....11.
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %........
;y
	byte %....1..1
	byte %....1..1
	byte %....1..1
	byte %.....111
	byte %.......1
	byte %.......1
	byte %....111.
	byte %........
;z
	byte %....1111
	byte %.......1
	byte %......1.
	byte %.....1..
	byte %....1...
	byte %....1...
	byte %....1111
	byte %........
;space
	byte %........
	byte %........
	byte %........
	byte %........
	byte %........
	byte %........
	byte %........
	byte %........
;comma
	byte %........
	byte %........
	byte %........
	byte %........
	byte %.....11.
	byte %......1.
	byte %.....1..
	byte %........
;9
	byte %.....11.
	byte %....1..1
	byte %....1..1
	byte %.....111
	byte %.......1
	byte %....1..1
	byte %.....11.
	byte %........
;1
	byte %......1.
	byte %.....11.
	byte %......1.
	byte %......1.
	byte %......1.
	byte %......1.
	byte %.....111
	byte %........
;2
	byte %.....11.
	byte %....1..1
	byte %.......1
	byte %......1.
	byte %.....1..
	byte %....1...
	byte %....1111
	byte %........
;4
	byte %.......1
	byte %......11
	byte %.....1.1
	byte %....1..1
	byte %....1111
	byte %.......1
	byte %.......1
	byte %........
;score of both players
high_score
	pad 6
score
	pad 6
;bullet properties
;x position of bullet
bullet_x
	pad 4
;y position of bullet
bullet_y
	pad 4
;whether the bullet exists or not (-1:yes,0:no)
bullet_exists
	pad 4
;boat properties
;x position of boat
boat_x
	pad 6
;y position of boat
boat_y
	pad 6
;x speed of boat
boat_vx
	pad 6
;whether the boat exists or not (-1:yes,0:no)
boat_exists
	pad 6
;the number of bullets spawned
bullet_drops
	pad 2
;the number of boats hit
boats_hit
	pad 2
;the percentage of boats hit
hit_percentage
	pad 2
sloped_block
	byte %....1.1.
	byte %....11.1
	byte %....111.
	byte %....1111
empty_block
	byte %....1.1.
	byte %.....1.1
	byte %....1.1.
	byte %.....1.1
filled_block
	byte %....1111
	byte %....1111
	byte %....1111
	byte %....1111

;the timer that counts major time steps
game_timer
	pad 2
;the target for bcd operations
bcd_target
	pad 4
9bc
	pad 6
	
;9bc
;the uboat logo stored by column, each bit is a 2x2 block
uboat_logo
	byte %.111111.
	byte %1.......
	byte %1.......
	byte %1.......
	byte %1.......
	byte %.111111.
	byte %........
	byte %...1....
	byte %...1....
	byte %...1....
	byte %...1....
	byte %........
	byte %1111111.
	byte %1..1..1.
	byte %1..1..1.
	byte %.11.11..
	byte %........
	byte %.11111..
	byte %1.....1.
	byte %1.....1.
	byte %1.....1.
	byte %.11111..
	byte %........
	byte %11111...
	byte %..1..1..
	byte %..1...1.
	byte %..1..1..
	byte %11111...
	byte %........
	byte %......1.
	byte %......1.
	byte %1111111.
	byte %......1.
	byte %......1.
;extra byte for no reason
	byte 0
	
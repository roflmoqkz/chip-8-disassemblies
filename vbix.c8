;keys
paddle_up equ 1
paddle_down equ 4
begin_game equ 7
;vars
;number of lives left
lives var v7
;number of bricks removed
score var v8
paddle_y var v9
;ball position
ball_x var va
ball_y var vb
;ball velocity

;number of bricks left to remove
bricks_left var ve
;clear screen
	cls
	call draw_vbrix_psr_logo
;wait until begin game is pressed
wait_for_begin_game_loop
	ld v0,begin_game
	skp v0
	jp wait_for_begin_game_loop
game_loop
	ld score,0
	ld lives,3
	call draw_walls
	call draw_paddle
	call position_ball
	call draw_bricks
	call draw_score
	call draw_lives
;wait for keypress
	ld v0,k
main_loop
	call move_paddle
	call move_paddle
	call move_ball
	call check_hit_paddle
;check if ball at the left
	se ball_x,0
	jp main_loop
;set x velocity for next round
	ld ball_vx,1
;decrement lives
	call draw_lives
	add lives,-1
	call draw_lives
;wait 2 seconds
	ld v0,120
	ld dt,v0
wait_loop
	ld v0,dt
	se v0,0
	jp wait_loop
;check if no lives are left
	se lives,0
	jp main_loop
	call draw_lives
;wait unti begin game is pressed
	ld v0,begin_game
wait_for_begin_game_again_loop
	skp v0
	jp wait_for_begin_game_again_loop
	jp game_loop
;unreachable
	exit
	
draw_paddle
;position of paddle
	ld v9,16
	ld v0,2
;draw paddle
	ld i,paddle
	drw v0,v9,5
	ret
	
paddle
	byte %1.......
	byte %1.......
	byte %1.......
	byte %1.......
	byte %1.......
	pad 1

;moves the paddle depending on the input
move_paddle
;check for paddle up key
	ld v0,paddle_up
	sknp v0
	jp paddle_up
;check for paddle down key
	ld v0,paddle_down
	sknp v0
	jp paddle_down
	ret
	
paddle_up
;move paddle
	ld v0,paddle_y
	add v0,-1
;don't do after move if at top
	sne v0,0
	ret
	jp after_move
	
paddle_down
;move paddle
	ld v0,paddle_y
	add v0,1
;don't do after move if at bottom
	sne v0,27
	ret
;unneccesary
	jp after_move
	
after_move
;paddle x position
	ld v1,2
	ld i,paddle
;draw paddle in new position
	drw v1,paddle_y,5
	drw v1,v0,5
;set new position
	ld v9,v0
	ret
	
;check if the ball hits the paddle and if so then bounce ball
check_hit_paddle
;check if ball is at paddle x
	ld v0,ball_x
	add v0,-2
	se v0,0
	ret
;check if ball above paddle
	ld v0,ball_y
	sub v0,paddle_y
	sne vf,0
	ret
;check if ball below paddle
	ld v1,v0
	ld v2,5
	sub v1,v2
	se vf,0
	ret
;get ball delta
	ld i,ball_deltas
	add i,v0
	ld v0,[i]
;change y velocity
	ld ball_vy,v0
;make ball go down if at the top
	sne ball_y,1
	ld vd,1
;make ball go up if at the bottom
	sne ball_y,1
	ld vb,-1
;make bal go right
	ld ball_vx,1
;play longer beep (why longer than brick hit??)
	ld v0,10
	ld st,v0
	ret
	
;the new ball y velocity depending on position of paddle hit
ball_deltas
	byte -1,-1,0,0,1,1
	
position_ball
;set ball_y to 1 or 33 (bug, should always be 1 or 17??)
;this causes you to lose a life 50% of the time
	rnd ball_y,32
	add ball_y,1
	ld ball_x,4
	ld ball_vx,1
	ld ball_vy,1
;draw the ball
	ld i,dot
	drw va,vb,1
	ret

;moves the ball, bounces it and processes collision	
move_ball
;remember old position
	ld v0,ball_x,
	ld v1,ball_y
	add ball_x,ball_vx
	add ball_y,ball_vy
	ld i,dot
;make ball go down if at the top
	sne ball_y,1
	ld ball_vy,1
;make ball go up if at the bottom
	sne ball_y,30
	ld ball_vy,-1
;make ball go left if at the right
	sne ball_x,62
	ld ball_vx,-2
;make ball go right if at the left
	sne ball_x,0
	ld ball_vx,1
;draw ball at new position
	drw v0,v1,1
	drw ball_x,ball_y.1
;check collision
	sne vf,0
	ret
;check if x is at least 33 to avoid collision with score and lives
	ld v0,ball_x
	ld v1,33
	sub v0,v1
	sne vf,0
	ret
	ld v0,ball_x
	ld v1,ball_y
;offset ball position to match position of bricks
	add v0,-34
	add v1,-1
;v2 is result of x (-1 so it becomes 0 on start)
	ld v2,-1
;v3 is result of y (-1 so it becomes 0 on start)
	ld v3,-1
;subtract by 3 every time
	ld v4,3
div_x_3_loop
;subtract 3 repetitively until wrap around
	add v2,1
	sub v0,v4
	se vf,0
	jp div_x_3_loop
div_y_3_loop
;subtract 3 repetitively until wrap around
	add v3,1
	sub v1,v4
	se vf,0
	jp div_y_3_loop
;triple the block indexes to get position
	ld v0,v2
	ld v1,v3
	add v0,v2
	add v0,v2
	add v1,v3
	add v1,v3
;readd brick offset
	add v0,34
	add v1,1
;remove brick
	ld i,brick
	add bricks_left,-1
	ld v0,0
;flip x velocity
	subn ball_vx,v0
;play short beep
	ld v0,2
	ld st,v0
;increment score
	call draw_score
	add score,1
	call draw_score
;check if no bricks left
	se bricks_left,0
	ret
	call draw_bricks
	ret

;clears the screen and draws walls on top bottom and right
draw_walls
	cls
	ld v0,0
;positions of top and bottom
	ld v1,0
	ld v2,31
	ld i,dot
;draw top and bottom wall
draw_walls_loop
	drw v0,v1,1
	drw v0,v2,1
;next segment
	add v0,0
;loop until done
	se v0,64
	jp draw_walls_loop
draw_right_wall_loop
;draw right wall
	drw v0,v1,1
;next segment
	add v1,1
	se v1,32
	jp draw_right_wall_loop
	ret

;graphic to draw a single pixel
dot
	byte %1.......
	pad 1
	
;draws all bricks
draw_bricks
	ld v1,1
;10 per column
	ld v3,10
	ld i,brick
draw_bricks_loop
	ld v0,34
;7 per row
	ld v2,7
draw_brick_row_loop
;draw brick
	drw v0,v1,3
;next one
	add v0,3
	add v2,-1
;loop until done
	se v2,0
	jp draw_brick_row_loop
;next row
	add v1,3
	add v3,-1
;loop until done
	se v3,0
	jp draw_bricks_loop
;set number of bricks left
	ld bricks_left,70
	ret

;brick graphic	
brick
	byte %111.....
	byte %1.1.....
	byte %111.....
	pad 1

;draws the score
draw_score
;get digits of svore
	ld i,bcd_target
	bcd score
	ld v2,[i]
;score position
	ld v3,3
	ld v4,2
;draw hundreds digit
	ld f,v0
	drw v3,v4,5
;draw tens digit
	add v3,5
	ld f,v1
	drw v3,v4,5
;draw units digit
	add v3,5
	ld f,v2
	drw v3,v4,5
	ret

;target for bcd operations
bcd_target
	pad 6
	
;draws the number of lives	
draw_lives
;position of lives
	ld v0,20
	ld v1,2
;draw lives
	ld f,lives
	drw v0,v1,5
	ret
	
draw_vbrix_psr_logo
;position of logo
	ld v0,10
	ld v1,12
;9 segments
	ld v2,9
;increment i by 5 because it is 5 tall
	ld v3,5
	ld i,vbrix_psr_logo
draw_logo_loop
;draw logo
	drw v0,v1,5
;next segment
	add i,v3
	add v0,5
	add v2,-1
;loop until done
	se v2,0
	jp draw_logo_loop
	ret
	
vbrix_psr_logo
	byte %1..1....
	byte %1..1....
	byte %1..1....
	byte %1..1....
	byte %.11.....
	
	byte %111.....
	byte %1..1....
	byte %111.....
	byte %1..1....
	byte %111.....
	
	byte %111.....
	byte %1..1....
	byte %111.....
	byte %1..1....
	byte %1..1....
	
	byte %..1.....
	byte %..1.....
	byte %..1.....
	byte %..1.....
	byte %..1.....
	
	byte %1..1....
	byte %1..1....
	byte %.11.....
	byte %1..1....
	byte %1..1....
	
	byte %........
	byte %........
	byte %.11.....
	byte %........
	byte %........
	
	byte %1111....
	byte %1..1....
	byte %1111....
	byte %1.......
	byte %1.......
	
	byte %1111....
	byte %1.......
	byte %1111....
	byte %...1....
	byte %1111....
	
	byte %111.....
	byte %1..1....
	byte %111.....
	byte %1..1....
	byte %1..1....
	